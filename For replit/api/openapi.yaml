openapi: 3.0.3
info:
  title: H&W Defect Tracking API
  version: 0.1.0
servers:
  - url: http://localhost:5173
  - url: http://localhost:8080
components:
  securitySchemes:
    cookieAuth:
      type: apiKey
      in: cookie
      name: sid
  schemas:
    UserPublic:
      type: object
      properties:
        user_id: { type: integer }
        full_name: { type: string }
        role: { type: string }
        department: { type: string, nullable: true }
        email: { type: string, nullable: true }
    AuthLoginBody:
      type: object
      required: [full_name, password]
      properties:
        full_name: { type: string }
        password: { type: string }
    AuthSignupBody:
      type: object
      required: [full_name, password, role]
      properties:
        full_name: { type: string }
        password: { type: string }
        role: { type: string }
        department: { type: string, nullable: true }
        email: { type: string, nullable: true }
    Defect:
      type: object
      properties:
        job_id: { type: integer }
        title: { type: string }
        description: { type: string }
        status: { type: string }
        urgency: { type: string }
        assigned_hours: { type: integer }
        current_hours: { type: integer }
        submitted_by: { type: string }
        location: { type: string, nullable: true }
        relevant_dept: { type: string, nullable: true }
        notes: { type: string, nullable: true }
        expected_completion: { type: string, format: date, nullable: true }
        created_at: { type: string, format: date-time }
    DefectCreate:
      type: object
      required: [title, description]
      properties:
        title: { type: string, minLength: 1 }
        description: { type: string, minLength: 1 }
        location: { type: string, nullable: true }
    DefectUpdate:
      type: object
      required: [status, urgency, relevant_dept]
      properties:
        status: { type: string }
        urgency: { type: string }
        relevant_dept: { type: string }
        notes: { type: string, nullable: true }
        assigned_hours: { type: integer, nullable: true }
        current_hours: { type: integer, nullable: true }
        expected_completion: { type: string, format: date, nullable: true }
    DashboardCounts:
      type: object
      properties:
        active: { type: integer }
        pending: { type: integer }
        high_priority_open: { type: integer }
    DistributionItem:
      type: object
      properties:
        label: { type: string }
        count: { type: integer }
    PhotoPayload:
      type: object
      properties:
        photo_data1: { type: string, nullable: true }
        photo_data2: { type: string, nullable: true }
        photo_data3: { type: string, nullable: true }
security:
  - cookieAuth: []
paths:
  /auth/signup:
    post:
      summary: Create user
      requestBody:
        required: true
        content: { application/json: { schema: { $ref: '#/components/schemas/AuthSignupBody' } } }
      responses:
        '201': { description: Created, content: { application/json: { schema: { $ref: '#/components/schemas/UserPublic' } } } }
  /auth/login:
    post:
      summary: Login and set httpOnly cookie
      requestBody:
        required: true
        content: { application/json: { schema: { $ref: '#/components/schemas/AuthLoginBody' } } }
      responses:
        '200': { description: OK, content: { application/json: { schema: { $ref: '#/components/schemas/UserPublic' } } } }
  /auth/logout:
    post:
      summary: Clear session cookie
      responses: { '204': { description: No Content } }
  /auth/me:
    get:
      summary: Get current session user
      responses:
        '200': { description: OK, content: { application/json: { schema: { $ref: '#/components/schemas/UserPublic' } } } }
  /meta/enums:
    get:
      summary: Get enum values (department, role, status, urgency)
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  department: { type: array, items: { type: string } }
                  role:       { type: array, items: { type: string } }
                  status:     { type: array, items: { type: string } }
                  urgency:    { type: array, items: { type: string } }
  /defects:
    get:
      summary: List defects with optional filter
      parameters:
        - in: query
          name: field
          schema: { type: string, enum: [status, urgency, relevant_dept] }
        - in: query
          name: op
          schema: { type: string, enum: ['=', 'not in'] }
        - in: query
          name: vals
          schema: { type: array, items: { type: string } }
          style: form
          explode: true
      responses:
        '200': { description: OK, content: { application/json: { schema: { type: array, items: { $ref: '#/components/schemas/Defect' } } } } }
    post:
      summary: Create new defect
      requestBody:
        required: true
        content: { application/json: { schema: { $ref: '#/components/schemas/DefectCreate' } } }
      responses:
        '201': { description: Created, content: { application/json: { schema: { $ref: '#/components/schemas/Defect' } } } }
  /defects/{id}:
    get:
      summary: Get defect by id
      parameters: [{ in: path, name: id, schema: { type: integer }, required: true }]
      responses:
        '200': { description: OK, content: { application/json: { schema: { $ref: '#/components/schemas/Defect' } } } }
    patch:
      summary: Update editable fields
      parameters: [{ in: path, name: id, schema: { type: integer }, required: true }]
      requestBody:
        required: true
        content: { application/json: { schema: { $ref: '#/components/schemas/DefectUpdate' } } }
      responses:
        '200': { description: OK, content: { application/json: { schema: { $ref: '#/components/schemas/Defect' } } } }
  /defects/{id}/photos:
    get:
      summary: Get photo blob fields for a defect
      parameters: [{ in: path, name: id, schema: { type: integer }, required: true }]
      responses:
        '200': { description: OK, content: { application/json: { schema: { $ref: '#/components/schemas/PhotoPayload' } } } }
    post:
      summary: Upsert base64 photo fields
      parameters: [{ in: path, name: id, schema: { type: integer }, required: true }]
      requestBody:
        required: true
        content: { application/json: { schema: { $ref: '#/components/schemas/PhotoPayload' } } }
      responses:
        '200': { description: OK, content: { application/json: { schema: { $ref: '#/components/schemas/PhotoPayload' } } } }
  /dashboard/counts:
    get:
      summary: Active, Pending, High (open) counts
      responses:
        '200': { description: OK, content: { application/json: { schema: { $ref: '#/components/schemas/DashboardCounts' } } } }
  /dashboard/urgency-distribution:
    get:
      summary: Counts by urgency excluding pending & both resolved
      responses:
        '200': { description: OK, content: { application/json: { schema: { type: array, items: { $ref: '#/components/schemas/DistributionItem' } } } } }
  /dashboard/status-distribution:
    get:
      summary: Counts by status excluding 'resolved (fixed)'
      responses:
        '200': { description: OK, content: { application/json: { schema: { type: array, items: { $ref: '#/components/schemas/DistributionItem' } } } } }
  /dashboard/work-hours:
    get:
      summary: title, current_hours, assigned_hours, hours_left ordered ASC
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    title: { type: string }
                    current_hours: { type: integer }
                    assigned_hours: { type: integer }
                    hours_left: { type: integer }
